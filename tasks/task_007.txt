# Task ID: 7
# Title: Implement Time-Series Support for KadeDB-Lite
# Status: pending
# Dependencies: 6
# Priority: medium
# Description: Develop time-series capabilities for KadeDB-Lite including simple time-based partitioning, basic aggregation functions (min, max, avg), and retention policies for IoT data collection.
# Details:
1. Design time-series data model:
   - Time-based key format (device_id:metric:timestamp)
   - Efficient value encoding for numeric data
   - Metadata storage for series information

2. Implement time-based partitioning:
   - Partition by time window (hourly, daily)
   - Partition metadata tracking
   - Automatic partition creation

3. Develop basic aggregation functions:
   - Min, max, avg, count, sum implementations
   - Downsampling support
   - Efficient single-pass algorithms

4. Create retention policy framework:
   - Time-based retention rules
   - Automatic data expiration
   - Configurable policies per series
   - Background cleanup process

5. Implement time-series query API:
   - Range queries by time
   - Aggregation queries
   - Multi-series queries

Key code examples:
```cpp
// Time-series key format
std::string createTimeSeriesKey(const std::string& deviceId, 
                               const std::string& metric,
                               uint64_t timestamp) {
  std::string key;
  key.reserve(deviceId.size() + metric.size() + sizeof(timestamp) + 2);
  key.append(deviceId);
  key.append(1, ':');
  key.append(metric);
  key.append(1, ':');
  
  // Encode timestamp in big-endian for proper lexicographical ordering
  char timestampBuf[sizeof(timestamp)];
  for (int i = sizeof(timestamp) - 1; i >= 0; i--) {
    timestampBuf[i] = timestamp & 0xFF;
    timestamp >>= 8;
  }
  key.append(timestampBuf, sizeof(timestamp));
  
  return key;
}

// Time-series aggregation
class TimeSeriesAggregator {
public:
  void addValue(double value) {
    count_++;
    sum_ += value;
    min_ = std::min(min_, value);
    max_ = std::max(max_, value);
  }
  
  double min() const { return min_; }
  double max() const { return max_; }
  double avg() const { return count_ > 0 ? sum_ / count_ : 0; }
  uint64_t count() const { return count_; }
  double sum() const { return sum_; }
  
private:
  uint64_t count_ = 0;
  double sum_ = 0;
  double min_ = std::numeric_limits<double>::max();
  double max_ = std::numeric_limits<double>::lowest();
};
```

C API extensions:
```c
// Time-series C API
KADEDB_LITE_API int kdb_lite_ts_add(kdb_lite_t* db, const char* device_id, 
                                   const char* metric, uint64_t timestamp, 
                                   double value);

KADEDB_LITE_API int kdb_lite_ts_query_range(kdb_lite_t* db, const char* device_id,
                                          const char* metric, 
                                          uint64_t start_time, uint64_t end_time,
                                          kdb_lite_ts_iterator_t** iterator);

KADEDB_LITE_API int kdb_lite_ts_aggregate(kdb_lite_t* db, const char* device_id,
                                        const char* metric,
                                        uint64_t start_time, uint64_t end_time,
                                        kdb_lite_agg_type_t agg_type,
                                        double* result);
```

# Test Strategy:
1. Unit tests for time-series key generation and parsing
2. Aggregation function correctness tests
3. Retention policy enforcement tests
4. Performance benchmarks for time-range queries
5. Memory usage profiling during aggregation
6. Stress tests with high-frequency data insertion
7. Long-running tests with retention policy activation
8. Integration tests with sample IoT data patterns
9. API usability verification with example applications
