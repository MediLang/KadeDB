# Task ID: 5
# Title: Develop KadeQL Parser and Query Engine
# Status: pending
# Dependencies: 3, 4
# Priority: high
# Description: Implement the KadeQL foundation with ANTLR-based parser supporting basic SQL operations, document manipulation, simple JOIN operations, and basic aggregation functions, along with a rule-based query optimizer.
# Details:
1. Define KadeQL grammar using ANTLR:
   - SQL-compatible syntax for relational operations
   - Document-specific extensions
   - Path expressions for document queries
   - Type system and literals

2. Implement query parser:
   - ANTLR integration
   - AST construction
   - Semantic validation
   - Error handling and reporting

3. Develop query planner with rule-based optimization:
   - Logical plan generation
   - Predicate pushdown
   - Join order optimization
   - Index selection
   - Physical plan generation

4. Implement query executors:
   - Table scan executor
   - Index scan executor
   - Nested loop join executor
   - Filter executor
   - Projection executor
   - Aggregation executor

5. Create result set management:
   - Efficient result representation
   - Cursor-based access
   - Serialization for API responses

Example KadeQL grammar (simplified):
```antlr
grammar KadeQL;

query
  : selectStmt
  | insertStmt
  | updateStmt
  | deleteStmt
  ;

selectStmt
  : SELECT columnList FROM tableExpr (WHERE expr)? (GROUP BY columnList)? (ORDER BY orderList)? (LIMIT INTEGER)?
  ;

insertStmt
  : INSERT INTO tableName (LPAREN columnList RPAREN)? VALUES valuesList
  ;

// Additional grammar rules...
```

Key classes:
```cpp
class QueryParser {
public:
  std::unique_ptr<QueryNode> parse(const std::string& queryText);
private:
  ANTLRInputStream input_;
  KadeQLLexer lexer_;
  CommonTokenStream tokens_;
  KadeQLParser parser_;
};

class QueryPlanner {
public:
  std::unique_ptr<PlanNode> createPlan(const QueryNode& query);
private:
  std::vector<OptimizationRule> rules_;
  CostModel costModel_;
};

class QueryExecutor {
public:
  ResultSet execute(const PlanNode& plan);
private:
  ExecutionContext context_;
  RelationalEngine& relEngine_;
  DocumentEngine& docEngine_;
};
```

# Test Strategy:
1. Parser unit tests with various query types
2. Syntax error handling tests
3. Query plan optimization tests
4. Execution correctness tests for different query types
5. Performance benchmarks for common queries
6. Memory usage profiling
7. Integration tests with storage engines
8. Stress tests with complex queries
9. Comparison with expected results from reference implementation
