# Task ID: 6
# Title: Implement KadeDB-Lite with RocksDB Integration
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Develop the KadeDB-Lite prototype with RocksDB integration for key-value storage, basic compaction strategies, and write-ahead logging, optimized for IoT devices.
# Details:
1. Configure RocksDB for embedded use:
   - Minimal memory footprint
   - Flash-friendly write patterns
   - Optimized for ARM Cortex-M
   - Custom comparators for time-series data

2. Implement key-value storage layer:
   - Key design for efficient access patterns
   - Value serialization/deserialization
   - Batch operations
   - Iterator support

3. Configure compaction strategies:
   - Size-tiered compaction for time-series
   - Custom compaction filter for TTL
   - Compaction scheduling for resource constraints

4. Implement write-ahead logging:
   - Crash recovery
   - Minimal WAL configuration
   - Checkpointing for resource-constrained devices

5. Create C API wrapper for embedded use:
   - Simple function calls
   - Minimal dependencies
   - Error handling

Key code examples:
```cpp
// RocksDB configuration for embedded use
rocksdb::Options createEmbeddedOptions() {
  rocksdb::Options options;
  options.create_if_missing = true;
  options.write_buffer_size = 4 * 1024 * 1024; // 4MB
  options.max_write_buffer_number = 2;
  options.target_file_size_base = 2 * 1024 * 1024; // 2MB
  options.max_background_compactions = 1;
  options.max_background_flushes = 1;
  options.compression = rocksdb::kNoCompression; // For predictable performance
  options.compaction_style = rocksdb::kCompactionStyleLevel;
  options.max_open_files = 10;
  options.table_factory.reset(rocksdb::NewBlockBasedTableFactory(
    rocksdb::BlockBasedTableOptions()));
  return options;
}

// KadeDB-Lite C API
extern "C" {
  KADEDB_LITE_API kdb_lite_t* kdb_lite_open(const char* path);
  KADEDB_LITE_API void kdb_lite_close(kdb_lite_t* db);
  KADEDB_LITE_API int kdb_lite_put(kdb_lite_t* db, const void* key, size_t keylen, 
                                  const void* value, size_t vallen);
  KADEDB_LITE_API int kdb_lite_get(kdb_lite_t* db, const void* key, size_t keylen,
                                  void* value, size_t* vallen);
  KADEDB_LITE_API int kdb_lite_delete(kdb_lite_t* db, const void* key, size_t keylen);
  // Additional API functions...
}
```

# Test Strategy:
1. Unit tests for key-value operations
2. Memory usage profiling on target devices
3. Performance benchmarks on ARM Cortex-M4
4. Crash recovery tests
5. Endurance testing with repeated writes
6. Power-loss simulation tests
7. Integration tests with time-series functionality
8. API usability tests with sample applications
9. Cross-platform compatibility tests
