name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test (${{ matrix.os }} - ${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            build_type: Debug
            preset: debug
            build_preset: debug
            test_preset: debug
          - os: ubuntu-latest
            build_type: Release
            preset: release
            build_preset: release
            test_preset: release
          - os: macos-latest
            build_type: Debug
            preset: debug
            build_preset: debug
            test_preset: debug
          - os: macos-latest
            build_type: Release
            preset: release
            build_preset: release
            test_preset: release
          - os: windows-latest
            build_type: Debug
            preset: windows-vs2022
            build_preset: windows-vs2022-debug
            test_preset: windows-vs2022-debug
          - os: windows-latest
            build_type: Release
            preset: windows-vs2022
            build_preset: windows-vs2022-release
            test_preset: windows-vs2022-release

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Ninja (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Install Ninja (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ninja || true

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y ninja

      - name: Cache CMake build directory
        uses: actions/cache@v4
        with:
          path: build/${{ matrix.preset }}
          key: ${{ runner.os }}-cmake-${{ matrix.preset }}-${{ hashFiles('CMakeLists.txt', 'cpp/CMakeLists.txt', 'lite/CMakeLists.txt', 'bindings/c/CMakeLists.txt', 'CMakePresets.json') }}
          restore-keys: |
            ${{ runner.os }}-cmake-${{ matrix.preset }}-

      - name: Configure (${{ matrix.build_type }})
        run: cmake -S . --preset ${{ matrix.preset }}

      - name: Build (${{ matrix.build_type }})
        run: cmake --build --preset ${{ matrix.build_preset }} --parallel

      - name: Install
        run: cmake --install build/${{ matrix.preset }} --prefix "${{ github.workspace }}/install"

      - name: Test (${{ matrix.build_type }})
        run: ctest --preset ${{ matrix.test_preset }} --output-on-failure

      - name: Show installed files
        if: runner.os != 'Windows'
        run: |
          echo "Installed tree:"
          if [ -d "${{ github.workspace }}/install" ]; then
            find "${{ github.workspace }}/install" -maxdepth 3 -print
          fi
        shell: bash

      - name: Upload install dir (artifact)
        if: runner.os == 'Linux' && matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: install-${{ matrix.os }}-${{ matrix.preset }}
          path: install/

  coverage:
    name: Coverage (ubuntu-latest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build gcovr

      - name: Configure (RelWithDebInfo Coverage)
        run: cmake -S . --preset relwithdebinfo-coverage

      - name: Build (RelWithDebInfo Coverage)
        run: cmake --build --preset relwithdebinfo-coverage --parallel

      - name: Test (Coverage build)
        run: ctest --test-dir build/relwithdebinfo-coverage --output-on-failure
        shell: bash

      - name: Generate coverage reports
        run: |
          gcovr -r . --xml -o build/relwithdebinfo-coverage/coverage.xml
          gcovr -r . --branches --txt -o build/relwithdebinfo-coverage/coverage.txt || true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: build/relwithdebinfo-coverage/coverage.xml
          flags: unittests
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            build/relwithdebinfo-coverage/coverage.xml
            build/relwithdebinfo-coverage/coverage.txt
