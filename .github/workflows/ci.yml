name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Debug, Release]
        exclude:
          - os: windows-latest
            build_type: Debug  # Skip Debug on Windows to save CI time

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      if: matrix.use_system_deps && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          librocksdb-dev \
          libantlr4-runtime-dev \
          libssl-dev \
          pkg-config
    
    - name: Install dependencies
      if: !matrix.use_system_deps || matrix.os != 'ubuntu-latest'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docs.txt
      if: runner.os != 'Windows'
    
    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install ninja
      shell: pwsh
    
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                 -DUSE_SYSTEM_DEPS=${{ matrix.use_system_deps && 'ON' || 'OFF' }} \
                 -DBUILD_TESTS=ON \
                 -DBUILD_BENCHMARKS=${{ github.ref == 'refs/heads/main' && 'ON' || 'OFF' }} \
                 -DENABLE_ASAN=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }} \
                 -DENABLE_UBSAN=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }} \
                 -DENABLE_TSAN=${{ matrix.build_type == 'Debug' && matrix.os == 'ubuntu-latest' && 'ON' || 'OFF' }} \
                 -DENABLE_COVERAGE=${{ matrix.build_type == 'Debug' && github.ref == 'refs/heads/main' && 'ON' || 'OFF' }} \
                 -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      shell: bash
    
    - name: Build
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} -- -j$(nproc)
      shell: bash
    
    - name: Test
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}
      shell: bash
      env:
        # Increase timeout for tests
        CTEST_TEST_TIMEOUT: 300
    
    - name: Upload test results
      if: always() && (runner.os == 'Linux' || runner.os == 'macOS')
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.use_system_deps && 'system-deps' || 'bundled-deps' }}
        path: build/Testing/**/*.xml
        if-no-files-found: ignore
    
    - name: Upload coverage
      if: matrix.build_type == 'Debug' && github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: build/coverage.info
        fail_ci_if_error: false
        name: test-results-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/Testing/**/*.xml
          build/coverage/**/*
        retention-days: 7
    
    - name: Upload build artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/CMakeFiles/CMake*.log
          build/Testing/**/*.log
        retention-days: 7

  coverage:
    name: Code Coverage
    needs: build
    if: github.event_name == 'push' && matrix.os == 'ubuntu-latest' && matrix.build_type == 'Debug'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate coverage report
      run: |
        cd build
        ctest -T Test
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: build/coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  package:
    name: Create Packages
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create source package
      run: |
        mkdir -p dist
        git archive --format=tar.gz HEAD -o dist/kadedb-src-${{ github.sha }}.tar.gz
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: dist/
        retention-days: 5
