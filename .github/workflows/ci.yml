name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]

jobs:
  # Lightweight dev CI for non-main branch pushes
  build_dev:
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    name: Dev Build and Test (ubuntu-latest - Debug)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Ninja (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Configure (Debug)
        run: cmake -S . --preset debug

      - name: Build (Debug)
        run: cmake --build --preset debug --parallel

      - name: Test (Debug)
        run: ctest --test-dir build/debug --output-on-failure

  # Full CI on main branch and PRs
  build:
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    name: Build and Test (${{ matrix.os }} - ${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            build_type: Debug
            preset: debug
            build_preset: debug
            test_preset: debug
          - os: ubuntu-latest
            build_type: Release
            preset: release
            build_preset: release
            test_preset: release
          - os: macos-latest
            build_type: Debug
            preset: macos-clang-debug
            build_preset: macos-clang-debug
            test_preset: macos-clang-debug
          - os: macos-latest
            build_type: Release
            preset: macos-clang-release
            build_preset: macos-clang-release
            test_preset: macos-clang-release
          - os: windows-latest
            build_type: Debug
            preset: windows-vs2022
            build_preset: windows-vs2022-debug
            test_preset: windows-vs2022-debug
          - os: windows-latest
            build_type: Release
            preset: windows-vs2022
            build_preset: windows-vs2022-release
            test_preset: windows-vs2022-release

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Ninja (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Install Ninja (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ninja || true

      - name: Set clang as default (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Setup Visual Studio environment (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Show compiler versions (non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "CC=$(which ${CC:-cc})"; ${CC:-cc} --version || true
          echo "CXX=$(which ${CXX:-c++})"; ${CXX:-c++} --version || true

      - name: Show compiler versions (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $cc = if ($env:CC) { $env:CC } else { "cl" }
          $cxx = if ($env:CXX) { $env:CXX } else { "cl" }
          $ccPath = (Get-Command $cc -ErrorAction SilentlyContinue).Source
          $cxxPath = (Get-Command $cxx -ErrorAction SilentlyContinue).Source
          Write-Host "CC path: $ccPath"
          if ($ccPath) {
            if ($cc -eq "cl") {
              try { cl 2>&1 | Select-Object -First 1 | Out-Host } catch { Write-Host "cl.exe found but failed to run: $_" }
            } else {
              try { & $cc --version 2>$null | Out-Host } catch { Write-Host "$cc found but failed to run: $_" }
            }
          } else {
            Write-Host "CC compiler '$cc' not found in PATH"
          }
          Write-Host "CXX path: $cxxPath"
          if ($cxxPath) {
            if ($cxx -eq "cl") {
              try { cl 2>&1 | Select-Object -First 1 | Out-Host } catch { Write-Host "cl.exe found but failed to run: $_" }
            } else {
              try { & $cxx --version 2>$null | Out-Host } catch { Write-Host "$cxx found but failed to run: $_" }
            }
          } else {
            Write-Host "CXX compiler '$cxx' not found in PATH"
          }

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y ninja

      - name: Cache CMake build directory
        uses: actions/cache@v4
        with:
          path: build/${{ matrix.preset }}
          key: ${{ runner.os }}-cmake-${{ matrix.preset }}-${{ hashFiles('CMakeLists.txt', 'cpp/CMakeLists.txt', 'lite/CMakeLists.txt', 'bindings/c/CMakeLists.txt', 'CMakePresets.json') }}
          restore-keys: |
            ${{ runner.os }}-cmake-${{ matrix.preset }}-

      - name: Configure (${{ matrix.build_type }})
        run: cmake -S . --preset ${{ matrix.preset }}

      - name: Build (${{ matrix.build_type }})
        run: cmake --build --preset ${{ matrix.build_preset }} --parallel

      - name: Install (Windows)
        if: runner.os == 'Windows'
        continue-on-error: true
        run: cmake --install build/${{ matrix.preset }} --config ${{ matrix.build_type }} --prefix "${{ github.workspace }}\install"

      - name: Install (non-Windows)
        if: runner.os != 'Windows'
        run: cmake --install build/${{ matrix.preset }} --prefix "${{ github.workspace }}/install"

      - name: Test (${{ matrix.build_type }}) [Linux/macOS]
        if: runner.os != 'Windows'
        run: ctest --test-dir build/${{ matrix.preset }} --output-on-failure

      - name: Test (${{ matrix.build_type }}) [Windows]
        if: runner.os == 'Windows'
        run: ctest --test-dir build/${{ matrix.preset }} -C ${{ matrix.build_type }} --output-on-failure

      - name: Show installed files
        if: runner.os != 'Windows'
        run: |
          echo "Installed tree:"
          if [ -d "${{ github.workspace }}/install" ]; then
            find "${{ github.workspace }}/install" -maxdepth 3 -print
          fi
        shell: bash

      - name: Upload install dir (artifact)
        if: runner.os == 'Linux' && matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: install-${{ matrix.os }}-${{ matrix.preset }}
          path: install/

  coverage:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Coverage (ubuntu-latest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build python3-pip
          python3 -m pip install --user gcovr

      - name: Configure (RelWithDebInfo + Coverage flags)
        run: cmake -S . -B build/coverage -DKADEDB_ENABLE_COVERAGE=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo

      - name: Build (Coverage)
        run: cmake --build build/coverage --parallel

      - name: Generate coverage reports (runs tests)
        run: cmake --build build/coverage --target coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: build/coverage/coverage/coverage.xml
          flags: unittests
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            build/coverage/coverage/coverage.xml
            build/coverage/coverage/index.html

  asan_integration:
    # Run on push and PR to capture a stacktrace for the flaky Release-only segfault
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    name: ASAN Integration (ubuntu-latest - RelWithDebInfo)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (Ninja, gdb)
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build gdb

      - name: Configure (RelWithDebInfo + ASAN/UBSAN)
        run: |
          # Force diagnostic deref in this job only to elicit sanitizer reports
          export CXXFLAGS="$CXXFLAGS -DKADEDB_FORCE_DOC_DEREF=1"
          cmake -S . -B build/relasan \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DKADEDB_ENABLE_ASAN=ON \
            -DKADEDB_ENABLE_UBSAN=ON

      - name: Build (relasan)
        run: cmake --build build/relasan --parallel

      - name: Run targeted test with ASAN (ctest)
        env:
          ASAN_OPTIONS: abort_on_error=1:disable_coredump=0:detect_leaks=1:strict_string_checks=1:fast_unwind_on_malloc=0:malloc_context_size=50
          UBSAN_OPTIONS: print_stacktrace=1:halt_on_error=1
        shell: bash
        run: |
          set +e
          ctest --test-dir build/relasan -R kadedb_combined_storage_integration_test --output-on-failure 2>&1 | tee asan_ctest_output.txt
          echo "ctest exit code was $? (ignored to allow artifact upload)"
          echo "--- BEGIN asan_ctest_output.txt ---"
          cat asan_ctest_output.txt || true
          echo "--- END asan_ctest_output.txt ---"
          exit 0

      - name: Run test binary standalone (capture ASAN stderr)
        env:
          ASAN_OPTIONS: abort_on_error=1:disable_coredump=0:detect_leaks=1:strict_string_checks=1:fast_unwind_on_malloc=0:malloc_context_size=50
          UBSAN_OPTIONS: print_stacktrace=1:halt_on_error=1
        shell: bash
        run: |
          set +e
          BIN="build/relasan/bin/kadedb_combined_storage_integration_test"
          if [ -x "$BIN" ]; then
            "$BIN" 2>&1 | tee asan_binary_output.txt || true
          else
            echo "Binary not found: $BIN" | tee asan_binary_output.txt
          fi
          echo "--- BEGIN asan_binary_output.txt ---"
          cat asan_binary_output.txt || true
          echo "--- END asan_binary_output.txt ---"
          exit 0

      - name: Run targeted test under gdb for backtrace
        env:
          # Disable LSAN under gdb to avoid ptrace incompatibility; keep ASAN/UBSAN
          ASAN_OPTIONS: abort_on_error=1:disable_coredump=0:detect_leaks=0:strict_string_checks=1:fast_unwind_on_malloc=0:malloc_context_size=50
          UBSAN_OPTIONS: print_stacktrace=1:halt_on_error=1
        shell: bash
        run: |
          set +e
          BIN="build/relasan/bin/kadedb_combined_storage_integration_test"
          if [ -x "$BIN" ]; then
            gdb -q -batch \
              -ex "set env ASAN_OPTIONS=$ASAN_OPTIONS" \
              -ex "set env UBSAN_OPTIONS=$UBSAN_OPTIONS" \
              -ex run -ex "bt full" --args "$BIN" > asan_gdb_bt.txt 2>&1 || true
          else
            echo "Binary not found: $BIN" | tee asan_gdb_bt.txt
          fi
          exit 0

      - name: Upload ASAN artifacts
        uses: actions/upload-artifact@v4
        with:
          name: asan-integration-logs
          path: |
            asan_ctest_output.txt
            asan_binary_output.txt
            asan_gdb_bt.txt

  gdb_release:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    name: GDB (ubuntu-latest - RelWithDebInfo)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (Ninja, gdb)
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build gdb

      - name: Configure (RelWithDebInfo)
        run: |
          cmake -S . -B build/relwithdebinfo -DCMAKE_BUILD_TYPE=RelWithDebInfo

      - name: Build (RelWithDebInfo)
        run: cmake --build build/relwithdebinfo --parallel

      - name: Run failing test under gdb
        shell: bash
        run: |
          set +e
          BIN="build/relwithdebinfo/bin/kadedb_combined_storage_integration_test"
          if [ -x "$BIN" ]; then
            gdb -q -batch -ex run -ex "bt full" --args "$BIN" > gdb_release_bt.txt 2>&1 || true
          else
            echo "Binary not found: $BIN" | tee gdb_release_bt.txt
          fi
          echo "--- BEGIN gdb_release_bt.txt ---"
          cat gdb_release_bt.txt || true
          echo "--- END gdb_release_bt.txt ---"
          exit 0

      - name: Upload GDB (RelWithDebInfo) artifact
        uses: actions/upload-artifact@v4
        with:
          name: gdb-release-backtrace
          path: gdb_release_bt.txt
