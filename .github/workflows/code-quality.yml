name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

defaults:
  run:
    shell: bash

jobs:
  clang-format:
    name: Check Code Formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install clang-format
      run: sudo apt-get update && sudo apt-get install -y clang-format
    
    - name: Check formatting
      run: |
        find src include test -type f \( -name '*.h' -o -name '*.cpp' -o -name '*.c' \) \
          -exec clang-format --dry-run --Werror {} \;

  clang-tidy:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-tidy
    
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_TESTS=ON
    
    - name: Run clang-tidy
      run: |
        cd build
        run-clang-tidy -p .

  cppcheck:
    name: Static Analysis (cppcheck)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install cppcheck
      run: sudo apt-get update && sudo apt-get install -y cppcheck
    
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --suppress=missingIncludeSystem \
                --suppress=unusedFunction --error-exitcode=1 \
                --project=build/compile_commands.json

  python-lint:
    name: Python Linting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docs.txt
        pip install black flake8 mypy
    
    - name: Run Black
      run: black --check .
    
    - name: Run Flake8
      run: flake8 .
    
    - name: Run Mypy
      run: mypy --install-types --non-interactive .
